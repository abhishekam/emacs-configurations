#+STARTUP: overview
* Indentation fixes
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq tab-width 2) 
    (setq-default tab-always-indent 'complete) 
  #+END_SRC
** Code to indent buffer or region
#+BEGIN_SRC emacs-lisp
  ;; Allows for indenting a marked region or the entire buffer
  ;; http://emacsredux.com/blog/2013/03/27/indent-region-or-buffer/
  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun indent-region-or-buffer ()
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  ; Does not seem to work - though
  (setq mac-command-modifier 'super)
#+END_SRC
** Set up indentation key
   #+BEGIN_SRC  emacs-lisp
     (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
   #+END_SRC
* Interface stuff
  
#+BEGIN_SRC emacs-lisp
;; Inhibit startup message
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(defalias 'list-buffers 'ibuffer-other-window)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* Try
  
#+BEGIN_SRC emacs-lisp 

(use-package try
	     :ensure t)

#+END_SRC
  
* Which Key
  
#+BEGIN_SRC emacs-lisp 

(use-package which-key
	     :ensure t
	     :config
	     (which-key-mode))

#+END_SRC
* Org mode	     
  
#+BEGIN_SRC emacs-lisp 
(use-package org-bullets
	     :ensure t
	     :config
	     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Evil mode
  
#+BEGIN_SRC emacs-lisp 

  (use-package evil
    :ensure t

    :config
    (evil-mode 1))

  (use-package evil-workman-mode
    :config
    (evil-workman-global-mode +1))

#+END_SRC

* ido mode
  
#+BEGIN_SRC emacs-lisp 

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC

* Ace window configurations for window management
  
#+BEGIN_SRC emacs-lisp 
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

* Swiper mode configurations - Swiper/counsel/ivy
  
#+BEGIN_SRC emacs-lisp 
;;-------
;; Swiper mode super cool!!!
;;-------

(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
  )

#+END_SRC

* Autocomplete

#+BEGIN_SRC emacs-lisp 
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

* Themes and styles

#+BEGIN_SRC emacs-lisp 

  ;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  ;(use-package monokai-theme
  ;  :ensure t
  ;  :config
  ;  (load-theme 'monokai t))
  ;(set-default-font "Fira Mono 18")
  (defvar ha/fixed-font-family
    (cond ((x-list-fonts "Source Code Pro") "Source Code Pro")
          ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
          ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
    "My fixed width font based on what is installed, `nil' if not defined.")
  (when ha/fixed-font-family
    (set-frame-font ha/fixed-font-family)
    (set-face-attribute 'default nil :font ha/fixed-font-family :height 170)
    (set-face-font 'default ha/fixed-font-family)
    (set-fontset-font t 'symbol 
                      (font-spec :family "Hasklig") nil 'prepend))

  (use-package color-theme
    :ensure t
    :init (require 'color-theme)
    :config (use-package base16-theme
              :ensure t
              :config
              (load-theme 'base16-tomorrow-night t)))
  (setq-default line-spacing 10)

#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

   (use-package flycheck-status-emoji
     :ensure t
     :init (flycheck-status-emoji-mode t)) 
#+END_SRC
* Python

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (bind-key "<f12>" 'elpy-goto-definition)
    :config
    (elpy-enable)
    (setq python-shell-interpreter "python3"))
#+END_SRC

* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (use-package smartparens-config)
    (smartparens-global-mode 1))
#+END_SRC

* Javascript Configurations
#+BEGIN_SRC emacs-lisp

  (use-package js2-mode
    :ensure t
    :init
    (setq js-basic-indent 2)
    (setq-default js2-basic-indent 2
                  js2-basic-offset 2
                  js2-auto-indent-p t
                  js2-cleanup-whitespace t
                  js2-enter-indents-newline t
                  js2-indent-on-enter-key t
                  js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))
    (add-hook 'js2-mode-hook
              (lambda ()
                (push '("function" . ?Æ’) prettify-symbols-alist)))
    :config
    (add-hook 'js2-mode-hook
              (lambda ()
                (bind-key "<f12>" 'js2-jump-to-definition)
                (setq-default js2-basic-offset 2)
                (flycheck-mode t)
                (setq flycheck-disabled-checkers '(javascript-jshint))
                (setq flycheck-checkers '(javascript-eslint))
                (prettify-symbols-mode +1)
                (when (executable-find "eslint")
                  (flycheck-select-checker 'javascript-eslint))
                ))
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))

  (use-package js2-refactor
    :ensure t
    :init   (add-hook 'js2-mode-hook 'js2-refactor-mode)
    :config (js2r-add-keybindings-with-prefix "C-c ."))
  (use-package nodejs-repl
    :ensure t)

#+END_SRC

* Web mode configurations
#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
    (add-hook 'web-mode-hook
              (lambda()
                (setq web-mode-code-indent-offset 2)
                (setq web-mode-css-indent-offset 2)
                (setq web-mode-markup-indent-offset 2)
                (flycheck-mode t)
                (flycheck-add-mode 'javascript-eslint 'web-mode)
                (when (executable-find "eslint")
                  (flycheck-select-checker 'javascript-eslint)))))

#+END_SRC
* Shell configurations

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
#+END_SRC
 
* Undo configurations
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :ensure t
    :init
      (global-undo-tree-mode))

#+END_SRC
* Blog
#+BEGIN_SRC emacs-lisp
  (use-package org-page
    :ensure t
    :config
    (setq op/repository-directory "~/MyBlog/notebookOfThoughts")
    (setq op/site-domain "http://abhishekam.github.io")
    (setq op/personal-github-link "https://github.com/abhishekam")
    (setq op/site-main-title "Notebook of thoughts")
    (setq op/site-sub-title "...")
    (setq op/personal-disqus-shortname "notebookofthoughts")
    (setq op/theme-root-directory "~/MyBlog/themesForOrgBlog/themes")
    (setq op/item-cache nil) 
    (setq op/theme 'martin)
    )
#+END_SRC
* Magit status
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+END_SRC
* Line number configurations 
#+BEGIN_SRC emacs-lisp
  (use-package linum
    :init
    (add-hook 'prog-mode-hook 'linum-mode)
    (add-hook 'linum-mode-hook (lambda () (set-face-attribute 'linum nil :height 110)))

    :config
    (defun linum-fringe-toggle ()
      "Toggles the line numbers as well as the fringe."    (interactive)
      (cond (linum-mode (fringe-mode '(0 . 0))
                        (linum-mode -1))
            (t          (fringe-mode '(8 . 0))
                        (linum-mode 1))))

    :bind (("A-C-k"   . linum-mode)
           ("s-C-k"   . linum-mode)
           ("A-C-M-k" . linum-fringe-toggle)
           ("s-C-M-k" . linum-fringe-toggle)))

  (use-package linum-relative
    :ensure t
    :config
    (defun linum-new-mode ()
      "If line numbers aren't displayed, then display them.
       Otherwise, toggle between absolute and relative numbers."
      (interactive)
      (if linum-mode
          (linum-relative-toggle)
        (linum-mode 1)))

    :bind ("A-k" . linum-new-mode)
          ("s-k" . linum-new-mode))   ;; For Linux

#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+END_SRC
* scheme
#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "stk-simply")

#+END_SRC
* multiple-cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode)
    )
#+END_SRC
* typing
#+BEGIN_SRC emacs-lisp
  (use-package typing
    :ensure t)
#+END_SRC
