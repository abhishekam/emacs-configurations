#+STARTUP: overview
* Indentation fix
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq tab-width 2) 
    (setq-default tab-always-indent 'complete) 
  #+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'super)
#+END_SRC
* Custom Code
#+BEGIN_SRC emacs-lisp
  ;; From the link here
  ;; http://emacsredux.com/blog/2013/03/27/indent-region-or-buffer/
  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun indent-region-or-buffer ()
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))))
#+END_SRC
* Interface stuff
  
#+BEGIN_SRC emacs-lisp
;; Inhibit startup message
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(defalias 'list-buffers 'ibuffer-other-window)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
#+END_SRC

* Try
  
#+BEGIN_SRC emacs-lisp 

(use-package try
	     :ensure t)

#+END_SRC
  
* Which Key
  
#+BEGIN_SRC emacs-lisp 

(use-package which-key
	     :ensure t
	     :config
	     (which-key-mode))

#+END_SRC
* Org mode	     
  
#+BEGIN_SRC emacs-lisp 

(use-package org-bullets
	     :ensure t
	     :config
	     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC

* Evil mode
  
#+BEGIN_SRC emacs-lisp 

  (use-package evil
    :ensure t

    :config
    (evil-mode 1))

  (use-package evil-workman-mode
    :config
    (evil-workman-global-mode +1))

#+END_SRC

* ido mode
  
#+BEGIN_SRC emacs-lisp 

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC

* Ace window configurations for window management
  
#+BEGIN_SRC emacs-lisp 
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

* Swiper mode configurations - Swiper/counsel/ivy
  
#+BEGIN_SRC emacs-lisp 
;;-------
;; Swiper mode super cool!!!
;;-------

(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
  )

#+END_SRC

* Autocomplete

#+BEGIN_SRC emacs-lisp 
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

* Themes and styles

#+BEGIN_SRC emacs-lisp 

  ;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  ;(use-package monokai-theme
  ;  :ensure t
  ;  :config
  ;  (load-theme 'monokai t))
  ;(set-default-font "Fira Mono 18")
  (defvar ha/fixed-font-family
    (cond ((x-list-fonts "Hasklig")         "Hasklig")
          ((x-list-fonts "Source Code Pro") "Source Code Pro")
          ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
          ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
    "My fixed width font based on what is installed, `nil' if not defined.")
  (when ha/fixed-font-family
    (set-frame-font ha/fixed-font-family)
    (set-face-attribute 'default nil :font ha/fixed-font-family :height 150)
    (set-face-font 'default ha/fixed-font-family))

  (use-package color-theme
    :ensure t
    :init (require 'color-theme)
    :config (use-package color-theme-sanityinc-tomorrow
              :ensure t
              :config
              (load-theme 'sanityinc-tomorrow-night t)))

#+END_SRC
* Python

#+BEGIN_SRC emacs-lisp

  (use-package elpy
    :ensure t
    :init
    (bind-key "<f12>" 'elpy-goto-definition)
    :config
    (elpy-enable)
    (setq python-shell-interpreter "python3"))


#+END_SRC

* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (use-package smartparens-config)
    (smartparens-global-mode 1))
#+END_SRC

* Javascript Configurations
#+BEGIN_SRC emacs-lisp

  (use-package js2-mode
    :ensure t
    :init
    :config
    (add-hook 'js2-mode-hook
     (lambda ()
       (bind-key "<f12>" 'js2-jump-to-definition)
       (flycheck-mode t)
       (when (executable-find "eslint")
         (flycheck-select-checker 'javascript-eslint))
        )))

#+END_SRC

* Web mode configurations
#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
    (add-hook 'web-mode-hook
              (lambda()
                (flycheck-mode t)
                (flycheck-add-mode 'javascript-eslint 'web-mode)
                (when (executable-find "eslint")
                  (flycheck-select-checker 'javascript-eslint)))))

#+END_SRC
* Shell configurations

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
#+END_SRC
 
* Modeline configurations
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t)
  (custom-set-faces
   '(mode-line-buffer-id ((t (:foreground "#000000" :bold t))))
   '(which-func ((t (:foreground "#77aaff"))))
   '(mode-line ((t (:foreground "#000000" :background "#dddddd" :box nil))))
   '(mode-line-inactive ((t (:foreground "#000000" :background "#bbbbbb" :box nil)))))
  (defun powerline-simpler-vc-mode (s)
    (if s
        (replace-regexp-in-string "Git[:-]" "" s)
      s))

  ;; Some point, we could change the text of the minor modes, but we
  ;; need to get the text properties and sub them /back in/. To be
  ;; figured out later... Like:
  ;;   (let* ((props (text-properties-at 1 s))
  ;;          (apple (set-text-properties 0 1 props "⌘"))
  ;;          (fly-c (set-text-properties 0 1 props "✓"))
  ;;          (news1 (replace-regexp-in-string "񓵸" apple s)))
  ;;          (news2 (replace-regexp-in-string "FlyC" fly-c news1)))

  (defun powerline-simpler-minor-display (s)
      (replace-regexp-in-string
       (concat " " (mapconcat 'identity '("񓵸" "Projectile" "Fill" "BufFace") "\\|")) "" s))

  (defun powerline-ha-theme ()
    "A powerline theme that removes many minor-modes that don't serve much purpose on the mode-line."
    (interactive)
    (setq-default mode-line-format
                  '("%e"
                    (:eval
                     (let*
                         ((active
                           (powerline-selected-window-active))
                          (mode-line
                           (if active 'mode-line 'mode-line-inactive))
                          (face1
                           (if active 'powerline-active1 'powerline-inactive1))
                          (face2
                           (if active 'powerline-active2 'powerline-inactive2))
                          (separator-left
                           (intern
                            (format "powerline-%s-%s" powerline-default-separator
                                    (car powerline-default-separator-dir))))
                          (separator-right
                           (intern
                            (format "powerline-%s-%s" powerline-default-separator
                                    (cdr powerline-default-separator-dir))))
                          (lhs
                           (list
                            (powerline-raw "%*" nil 'l)
                            ;; (powerline-buffer-size nil 'l)
                            (powerline-buffer-id nil 'l)
                            (powerline-raw " ")
                            (funcall separator-left mode-line face1)
                            (powerline-narrow face1 'l)
                            (powerline-simpler-vc-mode (powerline-vc face1))))
                          (rhs
                           (list
                            (powerline-raw mode-line-misc-info face1 'r)
                            (powerline-raw "%4l" face1 'r)
                            (powerline-raw ":" face1)
                            (powerline-raw "%3c" face1 'r)
                            (funcall separator-right face1 mode-line)
                            (powerline-raw " ")
                            (powerline-raw "%6p" nil 'r)
                            (powerline-hud face2 face1)))
                          (center
                           (list
                            (powerline-raw " " face1)
                            (funcall separator-left face1 face2)
                            (when
                                (boundp 'erc-modified-channels-object)
                              (powerline-raw erc-modified-channels-object face2 'l))
                            (powerline-major-mode face2 'l)
                            (powerline-process face2)
                            (powerline-raw " :" face2)

                            (powerline-simpler-minor-display
                             (powerline-minor-modes face2 'l))

                            (powerline-raw " " face2)
                            (funcall separator-right face2 face1))))
                       (concat
                        (powerline-render lhs)
                        (powerline-fill-center face1
                                               (/
                                                (powerline-width center)
                                                2.0))
                        (powerline-render center)
                        (powerline-fill face1
                                        (powerline-width rhs))
                        (powerline-render rhs)))))))

  (powerline-ha-theme)
#+END_SRC
* Line number configurations 
#+BEGIN_SRC emacs-lisp
  (use-package linum
    :init
    (add-hook 'prog-mode-hook 'linum-mode)
    (add-hook 'linum-mode-hook (lambda () (set-face-attribute 'linum nil :height 110)))

    :config
    (defun linum-fringe-toggle ()
      "Toggles the line numbers as well as the fringe."    (interactive)
      (cond (linum-mode (fringe-mode '(0 . 0))
                        (linum-mode -1))
            (t          (fringe-mode '(8 . 0))
                        (linum-mode 1))))

    :bind (("A-C-k"   . linum-mode)
           ("s-C-k"   . linum-mode)
           ("A-C-M-k" . linum-fringe-toggle)
           ("s-C-M-k" . linum-fringe-toggle)))

  (use-package linum-relative
    :ensure t
    :config
    (defun linum-new-mode ()
      "If line numbers aren't displayed, then display them.
       Otherwise, toggle between absolute and relative numbers."
      (interactive)
      (if linum-mode
          (linum-relative-toggle)
        (linum-mode 1)))

    :bind ("A-k" . linum-new-mode)
          ("s-k" . linum-new-mode))   ;; For Linux

#+END_SRC

* Undo configurations
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :ensure t
    :init
      (global-undo-tree-mode))

#+END_SRC
* Indent buffer
#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun indent-region-or-buffer ()
    "Indent a region if selected, otherwise the whole buffer."
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))))
  (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
#+END_SRC
