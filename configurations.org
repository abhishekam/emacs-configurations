#+STARTUP: overview
* Interface stuff
  
#+BEGIN_SRC emacs-lisp
;; Inhibit startup message
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(defalias 'list-buffers 'ibuffer-other-window)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* Try
  
#+BEGIN_SRC emacs-lisp 

(use-package try
	     :ensure t)

#+END_SRC
  
* Which Key
  
#+BEGIN_SRC emacs-lisp 

(use-package which-key
	     :ensure t
	     :config
	     (which-key-mode))

#+END_SRC
* Org mode	     
  
#+BEGIN_SRC emacs-lisp 

(use-package org-bullets
	     :ensure t
	     :config
	     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC

* Evil mode
  
#+BEGIN_SRC emacs-lisp 

  (use-package evil
    :ensure t

    :config
    (evil-mode 1))

  (use-package evil-workman-mode
    :config
    (evil-workman-global-mode +1))

#+END_SRC

* ido mode
  
#+BEGIN_SRC emacs-lisp 

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC

* Ace window configurations for window management
  
#+BEGIN_SRC emacs-lisp 
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

* Swiper mode configurations - Swiper/counsel/ivy
  
#+BEGIN_SRC emacs-lisp 
;;-------
;; Swiper mode super cool!!!
;;-------

(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
  )

#+END_SRC

* Autocomplete

#+BEGIN_SRC emacs-lisp 
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

* Themes and styles

#+BEGIN_SRC emacs-lisp 

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (use-package monokai-theme
    :ensure t
    :config
    (load-theme 'monokai t))
  (set-default-font "Fira Mono 18")

#+END_SRC

* Shell configurations

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
#+END_SRC
* Python

#+BEGIN_SRC emacs-lisp

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))

#+END_SRC

* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (use-package smartparens-config)
    (smartparens-global-mode 1))
#+END_SRC
* Javascript Configurations
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :init
    (bind-key "<f12>" 'js2-jump-to-definition)
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
    
#+END_SRC
